#!/usr/bin/env bash

trap 'rm -f $DOCS_HTML; exit 1' HUP INT QUIT TERM ERR

set -e -u -o pipefail

CMD="$(basename $0)"
BIN="$(dirname "$0")"

DOCS_HTML="$(mktemp /tmp/docs-html-XXXXXX)"

trap "rm -f $DOCS_HTML; exit 1" HUP INT QUIT TERM

function usage {
    (echo "Usage: $CMD [-chNnv] meeting-number..."
     echo "-c        Clean up text in the files as they are downloaded (default)."
     echo "-h        Print this help message."
     echo "-n        Dry run. Don't execute commands."
     echo "-N        Create or update Zettelkasten paper notes."
     echo "-r        Raw; do not clean up text in the files as they are downloaded."
     echo "-v        Verbose. Print extra information if appropriate."
     echo "Get documents for 'meeting-number'..."
     echo "'meeting-number' is the name of a directory with meeting files.") 1>&2
}

. "$BIN/vecho"

# Clean by default now.
CLEAN=1
DRY_RUN=
ECHO=
NFLAG=
VFLAG=0
VOPT=
while getopts chNnv OPTCHAR; do
    case $OPTCHAR in
        c)  CLEAN=1;;
        h)  usage; exit 0;;
        n)  DRY_RUN=1 ECHO=echo;;
        N)  NFLAG=1;;
        r)  CLEAN=;;
        v)  VFLAG=$((VFLAG+1))
            if [[ -z "$VOPT" ]]; then
                VOPT=-v
            else
                VOPT=${VOPT}v
            fi;;
    esac
done

shift $(($OPTIND - 1))

case $# in
    0)  usage; exit 1;;
    *)  ;;
esac

if [[ ! -d "meetings/" ]]; then
    echo "$CMD: 'meetings/' is not a directory with meeting J3 papers" 1>&2
    exit 1
fi

if [[ ! -d "years/" ]]; then
    echo "$CMD: 'years/' is not a directory with yearly J3 papers" 1>&2
    exit 1
fi

ERR=0
NEW_PAPERS=
REVISED_PAPERS=
for M in "$@"; do
    case "$M" in
        [0-9])    M="00$M";;
        [0-9][0-9])    M="0$M";;
        [0-9][0-9][0-9])      ;;
        [0-9][0-9][0-9][a-d]) ;;
        *)  echo "Invalid meeting number $M" 2>&1
            ERR=1
            continue;;
    esac

    MEETING_DIR="meetings/$M"
    MEETING_NO=#${M/#0/}
    MEETING_NO=${M/#0/}
    mkdir -p "$MEETING_DIR"

    vecho 1 $MEETING_DIR:
    vecho 2 "    MEETING_DIR=$MEETING_DIR MEETING_NO=$MEETING_NO"

    vecho 1 "  Fetching document list..."
    vecho 2 "    curl -s -o \"$DOCS_HTML\" \"https://j3-fortran.org/doc/meeting/$MEETING_NO\""
    curl -s -o "$DOCS_HTML" "https://j3-fortran.org/doc/meeting/$MEETING_NO"

    if grep "No documents" "$DOCS_HTML" >/dev/null; then
        echo "  No documents"
        continue
    fi

    # For each file mentioned in $DOCS_HTML:

    sed -n -e "s;.*<tr.*href=\"/doc/year/\([^\"]*\).*;\1;p" <"$DOCS_HTML" \
    | while read FILENAME; do \
        PAPER_NAME="$(basename "$FILENAME")"
        vecho 1 "  $PAPER_NAME"
        vecho 2 "    FILENAME=$FILENAME"

        # Figure out the correct 4-digit year number
        case "$FILENAME" in
            [0-5][0-9]/)    echo "$CMD: Noticed deleted file entry '$FILENAME'" 1>&2
                            continue;;
            [0-5][0-9]/?*)  Y4="20$(dirname "$FILENAME")";;
            [6-9][0-9]/?*)  Y4="19$(dirname "$FILENAME")";;
            *)  echo "$CMD: Can't find 4-digit year for paper '$FILENAME'" 1>&2
                continue;;
        esac

        $ECHO mkdir -p "years/$Y4"

        # Fetch the file into the papers directory
        URL="https://j3-fortran.org/doc/year/$FILENAME"
        YTARGET="years/$Y4/$PAPER_NAME"
        MTARGET="$MEETING_DIR/$PAPER_NAME"
        PTARGET="papers/$PAPER_NAME"

        if $BIN/fetch-paper-from-web $VOPT "$URL" "$PTARGET.fetch"; then
            if [[ -n "$CLEAN" ]] && [[ "$PAPER_NAME" =~ ".txt" ]]; then
                vecho 1 "Clean up $CMD/cleanup-text $PTARGET.fetch"
                if [[ -z "$DRY_RUN" ]]; then
                    $BIN/cleanup-text $VOPT "$PTARGET.fetch"
                fi
            fi
        else
            ERR=1
        fi 2>&1 | sed -e 's/^/  /'

        if [[ ! -e "$PTARGET" ]]; then
            if [[ -n "$DRY_RUN" ]]; then
                rm "$PTARGET.fetch"
            else
                mv "$PTARGET.fetch" "$PTARGET"
            fi

            case "$PAPER_NAME" in
                *r[1-9]*.*)
                    echo "$PAPER_NAME revised $(grep '^Subject:' "$PTARGET")"
                    REVISED_PAPERS="$REVISED_PAPERS $PAPER_NAME";;
                *)
                    echo "$PAPER_NAME new $(grep '^Subject:' "$PTARGET")"
                    NEW_PAPERS="$NEW_PAPERS $PAPER_NAME";;
            esac
        elif ! cmp -s "$PTARGET" "$PTARGET.fetch"; then
            if [[ -n "$DRY_RUN" ]]; then
                rm "$PTARGET.fetch"
            else
                mv "$PTARGET.fetch" "$PTARGET"
            fi
            echo "$PAPER_NAME changed $(grep '^Subject:' "$PTARGET")"
        else
            rm "$PTARGET.fetch"
        fi

        # Does it properly exist in the meetings/ directory?
        # If not, symlink it to the file in the papers/ directory.
        if [[ -L "$MTARGET" ]]; then
            LINK="$(readlink "$MTARGET")"
            vecho 2 "  LINK read = '$LINK'"

            if [[ "$LINK" = "../../$PTARGET" ]]; then
                vecho 2 "  $MTARGET is linked correctly."
            else
                vecho 2 "  $MTARGET relinked."
                rm "$MTARGET"
                ln -s "../../$PTARGET" "$MTARGET"
            fi
        elif [[ -e "$MTARGET" ]]; then
            vecho 2 "  $MTARGET replaced and linked."
            rm "$MTARGET"
            ln -s "../../$PTARGET" "$MTARGET"
        else
            vecho 2 "  $MTARGET new."
            ln -s "../../$PTARGET" "$MTARGET"
        fi

        # Does it properly exist in the years/ directory?
        # If not, symlink it to the file in the papers/ directory.
        if [[ -L "$YTARGET" ]]; then
            LINK="$(readlink "$YTARGET")"
            vecho 2 "  LINK read = '$LINK'"

            if [[ "$LINK" = "../../$PTARGET" ]]; then
                vecho 2 "  $YTARGET is linked correctly."
            else
                vecho 2 "  $YTARGET relinked."
                rm "$YTARGET"
                ln -s "../../$PTARGET" "$YTARGET"
            fi
        elif [[ -e "$YTARGET" ]]; then
            vecho 2 "  $YTARGET replaced and linked."
            rm "$YTARGET"
            ln -s "../../$PTARGET" "$YTARGET"
        else
            vecho 2 "  $YTARGET new."
            ln -s "../../$PTARGET" "$YTARGET"
        fi

    done
done

rm -f $DOCS_HTML

if [[ -n "$NFLAG" ]]; then
    case "$PAPER_NAME" in
        *r[1-9]*.*)
            echo ""; echo "Revised papers $REVISED_PAPERS"
            $ECHO bin/add-revision-to-paper-note $REVISED_PAPERS;;
        *)
            echo ""; echo "New papers $NEW_PAPERS"
            $ECHO bin/create-paper-note $NEW_PAPERS;;
    esac
fi

# Index update is fast enough now to do all the time.
if  [[ "papers" -nt "index" ]]; then
    $ECHO $BIN/update-index index papers meetings years
fi

exit $ERR
