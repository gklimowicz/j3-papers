#!/usr/bin/env bash

trap "exit 1" HUP INT QUIT TERM

set -u -o pipefail

CMD="$(basename $0)"
function usage {
    (echo "Usage: $CMD [-hnv] j3-paper-number zk-id"
     echo "-h        Print this help message."
     echo "-n        Dry run. Don't execute commands."
     echo "-o        Open the new file when created."
     echo "-t        Print org-mode style TODO for the entry."
     echo "-v        Verbose. Print extra information if appropriate."
     echo "Create a J3 paper note for j3-paper-number with Zettelkasten zk-id.") 1>&2
}

ZK="/Users/gak/Documents/ZK/"

. $(dirname "$0")/vecho

DRY_RUN=
ECHO=
OFLAG=
TFLAG=1
VFLAG=
while getopts hnotv\? OPTCHAR; do
    case $OPTCHAR in
        h)  usage; exit 0;;
        n)  DRY_RUN=1 ECHO=echo;;
        o)  OFLAG=1;;
        t)  TFLAG=1;;
        v)  VFLAG=1;;
    esac
done

shift $(($OPTIND - 1))

case $# in
    2)  PAPER_ID="$1" ZK_ID="$2";;
    *)  usage; exit 1;;
esac

if [[ ! -d "papers" ]]; then
    echo "$CMD: Expected to be run in a directory with J3 'papers'" 1>&2
    exit 1
fi

PAPER_ID="$(basename "$PAPER_ID")"
PAPER_MATCHES="$(builtin cd papers && /bin/ls *"$PAPER_ID"* 2>/dev/null)"
vecho 1 "Matches: $PAPER_MATCHES"
if [[ "$PAPER_MATCHES" =~ "*" ]] || [[ "$PAPER_MATCHES" = "" ]]; then
    echo "$CMD: No match for '$PAPER_ID'" 1>&2
    exit 1
fi

BASE_NAME="$(echo "$PAPER_MATCHES" | sed -n -e 's/r[0-9]*\././' -e '1s/\.[^.]*//p')"
vecho 1 "  BASE_NAME='$BASE_NAME'"

if [[ -f "papers/$BASE_NAME.txt" ]]; then
    PREFERRED_SUFFIX=txt
elif [[ -f "papers/$BASE_NAME.pdf" ]]; then
    PREFERRED_SUFFIX=pdf
else
    PREFERRED_SUFFIX=txt
fi
vecho 1 "  PREFERRED_SUFFIX='$PREFERRED_SUFFIX'"

MEETING="$(ls meetings/*/"$BASE_NAME".* 2>/dev/null | sed -n -e '1s;.*/\(.*\)/.*;\1;p')"
vecho 1 "  MEETING='$MEETING'"

if [[ "$MEETING" =~ "*" ]]; then
    echo "$CMD: Can't identify meeting number for '$PAPER'" 1>&2
    exit 1
fi

if [[ "$PREFERRED_SUFFIX" = "txt" ]]; then
    SUBJECT="$(grep Subject: papers/$BASE_NAME.txt | sed -e 's/Subject:  *//' -e 's/  *$//' -e 's;[/:][/:]*;-;g')"
else
    SUBJECT=
fi

vecho 1 "  SUBJECT='$SUBJECT'"

if [[ "$SUBJECT" = "" ]]; then
    ZK_FILE="$ZK_ID J3 #$MEETING Paper $BASE_NAME.org"
else
    ZK_FILE="$ZK_ID J3 #$MEETING Paper $BASE_NAME $SUBJECT.org"
fi

if [[ -e "$ZK/$ZK_FILE" ]]; then
    echo "$ZK_FILE already exists"
    UUID="$(sed -n -e 's/^:[Ii][Dd]: *//p'"$ZK/$ZK_FILE" | head -1)"
else
    UUID="$(uuidgen)"

    TEXT="$(echo ":PROPERTIES:
:ID:                    $UUID
:END:
#+title: ${ZK_FILE/.org}
#+date: [$(date '+%F %a %H:%M')]
#+setupfile: setupfile.org
#+filetags: :#$MEETING:
#+startup: showall

* Summary


* Discussion
Move:
Second:


* References
$(echo "$PAPER_MATCHES" | sed -e "s/\(.*\)\(r.*\)*\.*/- [[j3-paper:&][\1\2 $SUBJECT]]/")


* Links")"

    if [[ -n "$DRY_RUN" ]]; then
        echo "echo \"$TEXT\" >\"$ZK/$ZK_FILE\""
    else
        echo "$TEXT" >$ZK/"$ZK_FILE"
    fi

fi

echo "[[id:$UUID][$(basename "$ZK_FILE" .org)]]"

if [[ -n "$OFLAG" ]]; then
    $ECHO open "$ZK_FILE"
fi

$ECHO emacsclient -e "(when (fboundp 'org-roam-db-sync) (org-roam-db-sync))" 2>&1 \
      | sed -e '/^nil$/d'
