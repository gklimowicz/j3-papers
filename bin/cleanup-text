#!/usr/bin/env bash

set -e -u -o pipefail

CMD="$(basename $0)"
CMD_DIR="$(dirname $0)"
function usage {
    echo "Usage: $CMD [-hnrv] file..." 1>&2
    echo "-h        Print this help message." 1>&2
    echo "-n        Dry run. Don't execute commands." 1>&2
    echo "-v        Verbose. Print extra information if appropriate." 1>&2
    echo "Filter to clean up J3 paper .txt files." 1>&2
    echo "Convert CRLF, CR line endings to UNIX line endings." 1>&2
    echo "Convert '<FF>2D' to '-'." 1>&2
    echo "Convert odd ^R, ^S, ^T to proper apostrophe and quote characters." 1>&2
    echo "Convert extended ASCII characters to quoting characters." 1>&2
    echo "Convert non-ASCII box-drawing characters to |' -' +." 1>&2
    echo "Convert extended ASCII to UTF-8." 1>&2
    echo "Remove NUL, ^Z." 1>&2
}

. "$CMD_DIR"/vecho

DRY_RUN=
ECHO=
VFLAG=0
while getopts hnv\? OPTCHAR; do
    case $OPTCHAR in
        h)  usage; exit 0;;
        n)  DRY_RUN=1 ECHO=echo;;
        v)  VFLAG=$((VFLAG+1));;
    esac
done

shift $(($OPTIND - 1))

case $# in
    0)  usage; exit 1;;
    *)  ;;
esac

for F in "$@"; do
    if [[ ! -f "$F" ]]; then
        echo "$CMD: '$F': file not found." 1>&2
        continue
    fi

    # Think harder about this, as there is some cleanup
    # (trailing blank lines, whitespace at end of line)
    # that we want to do even if the file is ASCII or
    # Unicode UTF-8.


    # Examine the file for all the possible transformations
    # we are able to apply. The transformation names are
    # the same as the commands in the 'bin' directory
    # that perform the transformation.
    TRANSFORMS=$(LC_ALL=C gawk '
                      BEGIN {
                          ALL_TRANSFORMS = "";
                          LAST_LINE_WAS_BLANK = 0;
                      }
                      function add_transform(trans) {
                          if (ALL_TRANSFORMS !~ " " trans) {
                              ALL_TRANSFORMS = ALL_TRANSFORMS " " trans
                              vecho 1 "Add " trans
                          }
                      }
                      # Note that the order matters here.
                      # It is safest to
                      #    - delete things
                      #    - do ASCII-to-ASCII transformations
                      #    - do non-ASCII-to-ASCII transformations
                      #    - carefully do the non-ASCII-to-UTF-8 transformations.
                      # This is because some of the UTF-8 encodings
                      # contain what might be considered non-ISO extended
                      # ASCII characters.
                      # (This might be better handled in the conversion
                      # routines, but that did not work at first try.

                      /\x1A/ { add_transform("delete-control-Z") }
                      /\x81/ { add_transform("delete-x81") }
                      /\xAB/ { add_transform("delete-8859-xAB") }
                      NR == 1 && /^\xFE\xFF|^\xEF\xBB\xFF/ {
                          add_transform("delete-byte-order-marks");
                      }

                      /\r./ { add_transform("convert-CR-to-LF") }
                      /\r$/ { add_transform("convert-CRLF-to-LF") }
                      /[ \t]\r*$/ { add_transform("delete-whitespace-at-eol") }
                      /\xFF[2]D/ { add_transform("convert-FF2D-to-plus") }
                      /\xB3|\xB4|\xC0|\xC1\|\xC2|\xC3\|\xC4|\xC5|\xD9|\xDA/ {
                          # Omit \xBF in pattern, as overlaps below.
                          add_transform("convert-xb3-xb4-xbf-etc-to-box-drowing")
                      }

                      /\xA1/ {
                          add_transform("convert-8859-xA1-to-inverted-exclamation-mark");
                      }
                      /\xA7/ { add_transform("convert-8859-xA7-to-section-mark") }
                      /\xA9/ { add_transform("convert-8859-xA9-to-copyright-mark") }
                      /\xAD/ { add_transform("convert-8859-xAD-to-en-dash") }
                      /\xB1/ { add_transform("convert-8859-xB1-to-plus-minus") }

                      /\xB7/ { add_transform("convert-8859-xB7-to-bullet") }
                      /\xBF/ {
                          if (ALL_TRANSFORMS !~ "convert-xb3-xb4-xbf-etc-to-box-drowing") {
                              # There is overlap with box-drowing in 96-115r3.txt
                              add_transform("convert-8859-xBF-to-inverted-question-mark")
                          }
                      }
                      /\xC9/ { add_transform("convert-8859-xC9-to-ellipsis") }
                      /\xD3/ { add_transform("convert-8859-xD2-xD3-to-curly-quotes") }
                      /\xD5/ { add_transform("convert-8859-xD5-to-apostrophe") }
                      /\xE7/ { add_transform("convert-8859-xE7-to-c-cedilla") }
                      /\xF1/ { add_transform("convert-8859-xF1-to-less-than-or-equal") }
                      /\x85/ { add_transform("convert-NEL-to-ellipses") }
                      /\x94/ { add_transform("convert-x91-x94-to-curly-quotes") }
                      /\x96/ { add_transform("convert-x96-to-en-dash") }
                      /\x97/ { add_transform("convert-x97-to-em-dash") }
                      /\xA0/ { add_transform("convert-xA0-to-non-breaking-space") }
                      /\xA3/ { add_transform("convert-xA3-to-less-than-or-equal") }
                      /\xB6/ { add_transform("convert-xB6-to-paragraph-mark") }
                      /\xE9|\xEB|\xF9|\xFB/ {
                          add_transform("convert-xE9_xEB-xF9-xFB-to-matrix-corners");
                      }
                      /^[ \t]*\r*$/ { LAST_LINE_WAS_BLANK = 1 }
                      /[^ \t\r]/  { LAST_LINE_WAS_BLANK = 0 }
                      END {
                          if (LAST_LINE_WAS_BLANK)
                              add_transform("delete-trailing-blank-lines");
                           if (ALL_TRANSFORMS != "")
                               print substr(ALL_TRANSFORMS, 2);
                      }' \
                 "$F")

    vecho 1 "Transformations for \"$F\": $TRANSFORMS"

    if [[ "$TRANSFORMS" == "" ]]; then
        vecho 1 "Nothing in \"$F\" to transform"
        continue
    fi

    CB="bin"
    CB="../gg-j3-papers/bin"
    PIPELINE="$(echo "$TRANSFORMS" | sed -e "s;^;$CB/;" -e "s; ; | $CB/;g")"
    vecho 1 "PIPELINE=$PIPELINE"

    if [[ -z "$DRY_RUN" ]]; then
        vecho 1 "chmod +w \"$F\"; cat \"$F\" | eval \"$PIPELINE\" | cpif \"$F\"; chmod -w \"$F\""
        chmod +w "$F"
        (export LC_ALL=C; cat "$F" | eval "$PIPELINE" | cpif "$F")
        chmod -w "$F"
        vecho 1 "$(file "$F")"
    fi
done

exit 0
